service: eng-metrics-api

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  environment: ${file(.env.yml):}
  apiGateway:
    apiKeys:
      - name: engMetricsApiKey
        value: ${env:ENG_METRICS_API_KEY}
    usagePlan:
      quota:
        limit: 5000
        offset: 1
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100
plugins:
  - serverless-api-gateway-caching

custom:
  apiGatewayCaching:
    enabled: true
  stage: "${opt:stage, self:provider.stage}"
  region: "us-east-1"

functions:
  backlog-epics:
    handler: functions/backlog-handlers.backlogEpics
    timeout: 20
    events:
      - http:
          path: /backlogs/{backlogId}/epics
          method: get
          cors: true
          private: true
          caching:
            enabled: true
            ttlInSeconds: 300
            cacheKeyParameters:
              - name: request.path.backlogId
  backlog-velocity:
    handler: functions/backlog-handlers.backlogVelocity
    timeout: 20
    events:
      - http:
          path: /backlogs/{backlogId}/velocity
          method: get
          cors: true
          private: true
          caching:
            enabled: true
            ttlInSeconds: 300
            cacheKeyParameters:
              - name: request.path.backlogId
  backlog-sprints:
    handler: functions/backlog-handlers.backlogSprints
    timeout: 20
    events:
      - http:
          path: /backlogs/{backlogId}/sprints
          method: get
          cors: true
          private: true
          caching:
            enabled: true
            ttlInSeconds: 300
            cacheKeyParameters:
              - name: request.path.backlogId    
  etl-backlog-epics:
      handler: functions/etl-handlers.etlBacklogEpics
      timeout: 30
      events:
        - schedule: 
            rate: cron(42 18 * * ? *)
            inputTransformer:
              inputTemplate:
                '{"backlogId": 23, "backlogName": "Map Search"}'
        - schedule: 
            rate: cron(44 18 * * ? *)
            inputTransformer:
              inputTemplate:
                '{"backlogId": 32, "backlogName": "Beacon"}'
        - schedule: 
            rate: cron(20 09 * * ? *)
            inputTransformer:
              inputTemplate:
                '{"backlogId": 48, "backlogName": "Lead-CRM Framework"}'

  etl-backlog-velocities:
      handler: functions/etl-handlers.etlVelocity
      timeout: 30
      events:
        - schedule: 
            rate: cron(0 0 ? * THU *)
            inputTransformer:
              inputTemplate:
                '{"backlogId": 23}'
        - schedule: 
            rate: cron(0 0 ? * THU *)
            inputTransformer:
              inputTemplate:
                '{"backlogId": 32}'
        - schedule: 
            rate: cron(0 0 ? * THU *)
            inputTransformer:
              inputTemplate:
                '{"backlogId": 48}'                